name: Comment on the pull request

# read-write repo token
# access to secrets
on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Auto Review Assistant1"]
    types:
      - completed

jobs:
  upload:
    runs-on: ubuntu-latest
    steps:
      # - name: 'Download artifact'
      #   uses: actions/github-script@v3.1.0
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       var artifacts = await github.actions.listWorkflowRunArtifacts({
      #          owner: context.repo.owner,
      #          repo: context.repo.repo,
      #          run_id: ${{github.event.workflow_run.id }},
      #       });
      #       var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
      #         return artifact.name == "pr"
      #       })[0];
      #       const artifact_id=matchArtifact.id;
      #       console.log(`Found artifact id: ${artifact_id}`)
            # var download = await github.actions.downloadArtifact({
            #    owner: context.repo.owner,
            #    repo: context.repo.repo,
            #    artifact_id: artifact_id,
            #    archive_format: 'zip'
            # });
            
            # const { Octokit } = require("@octokit/rest");
            # const octokit = new Octokit({
            #   auth: ${{ secrets.GITHUB_TOKEN }},
            # });
            # const { data: artifact } = await octokit.rest.actions.downloadArtifact({
            #   owner: context.repo.owner,
            #   repo: context.repo.repo,
            #   artifact_id: artifact_id,
            #   archive_format: "zip",
            # });
            # var fs = require('fs');
            # fs.writeFileSync('${{github.workspace}}/pr.zip', Buffer.from(download.data));
      # - run: unzip pr.zip
          # ${{github.event.workflow_run.id }}
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          run-id: ${{github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Verify
        run: |
          ls -R
      # - name: 'Comment on PR'
      #   uses: actions/github-script@v3
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       var fs = require('fs');
      #       var issue_number = Number(fs.readFileSync('./pr/NR'));
      #       await github.issues.createComment({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         issue_number: issue_number,
      #         body: 'Everything is OK. Thank you for the PR!'
      #       });
      - name: Post/Update comment
        id: post_comment
        run: |
          # 查找现有的 bot 评论
          existing_comment=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$(cat ./pr/NR)/comments" | \
            jq -r '.[] | select(.user.login == "github-actions[bot]") | {id: .id, body: .body} | @base64')
          
          if [[ -n "$existing_comment" ]]; then
            # 更新现有评论
            comment_id=$(echo "$existing_comment" | head -1 | base64 -d | jq -r .id)
            echo "Updating existing comment $comment_id"
            response=$(curl -s -X PATCH \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -d "$(jq -n --arg body "$(cat ./pr/review_data.md)" '{body: $body}')" \
              "https://api.github.com/repos/${{ github.repository }}/issues/comments/$comment_id")
          else
            # 创建新评论
            echo "Creating new comment"
            response=$(curl -s -X POST \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -d "$(jq -n --arg body "$(cat ./pr/review_data.md)" '{body: $body}')" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$(cat ./pr/NR)/comments")
          fi
      # - name: 'Comment on PR'
      #   uses: actions/github-script@v7
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       var fs = require('fs');
      #       var issue_number = Number(fs.readFileSync('./pr/NR'));
      #       const issue_content = fs.readFileSync('./pr/review_data.md', 'utf-8');
      #       console.log(issue_content);
      #       github.rest.issues.createComment({
      #         issue_number: issue_number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: issue_content
      #       })
