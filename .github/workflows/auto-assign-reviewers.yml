#
# Copyright (c) 2006-2025, RT-Thread Development Team
#
# SPDX-License-Identifier: Apache-2.0
#
# Change Logs:
# Date           Author       Notes
# 2025-01-21     kurisaW      Initial version
#

# Script Function Description: Assign PR reviews based on the MAINTAINERS list.asdasasaassasaasasss

name: Auto Review Assistant

on:
  pull_request_target:
    types: [opened, synchronize, reopened]
  issue_comment:
    types: [created]

jobs:
  assign-reviewers:
    runs-on: ubuntu-22.04
    permissions:
      issues: write
      pull-requests: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Get changed files
        id: changed_files
        run: |
          # 通过 GitHub API 获取 PR 的变更文件列表
          changed_files=$(curl -s \
            -H "Authorization: Bearer ${{ github.token }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" | \
            jq -r '.[].filename')  # 使用 jq 提取文件名
          echo "$changed_files" | grep -v '^MAINTAINERS$' > changed_files.txt
          #所有变更的文件
          echo "$changed_files" | grep -v '^MAINTAINERS$'
      - name: Parse MAINTAINERS file
        id: parse_maintainer
        run: |
          # 使用 AWK 解析 MAINTAINERS 文件格式：
          # 提取 tag（标签）、path（路径）和 owners（维护者 GitHub ID）
          awk '
            /^tag:/ { 
              tag = substr($0, index($0, $2))  # 提取标签内容
            }
            /^path:/ { 
              path = substr($0, index($0, $2))  # 提取路径内容
            }
            /^owners:/ {
              owners = substr($0, index($0, $2))  # 提取维护者信息
              split(owners, parts, /[()]/)       # 拆分出 GitHub ID（括号内内容）
              github_ids = ""
              for (i=2; i<=length(parts); i+=2) {
                github_ids = github_ids "@" parts[i] " "  # 拼接为 @user 格式
              }
              print tag "|" path "|" github_ids
            }
          ' MAINTAINERS > tag_data.csv
          #tag_data.csv包含所有人维护者
          cat tag_data.csv

      - name: Generate reviewers list
        id: generate_reviewers
        run: |
          # 根据变更文件路径匹配维护者规则
          rm -f triggered_reviewers.txt
          while IFS='|' read -r tag path reviewers; do
            # 使用正则匹配路径（支持子目录）
            if grep -qE "^$path(/|$)" changed_files.txt; then
              echo "$reviewers" | tr ' ' '\n' >> triggered_reviewers.txt
            fi
          done < tag_data.csv
          # 去重处理
          awk 'NF && !seen[$0]++' triggered_reviewers.txt > unique_reviewers.txt
          cat unique_reviewers.txt
      - name: Get approval status
        id: get_approval
        run: |
          
          #主要用于判断是否审查
          current_time=$(date -u +"%Y-%m-%d %H:%M UTC")
          reviewers=$(cat unique_reviewers.txt | tr '\n' '|')
          
          # 获取 PR 的所有评论
          comments=$(curl -s \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments")

          echo "$comments"
          echo "-------------------------------------------------"
          echo '#!/bin/bash' > approval_data.sh
          echo 'declare -A approvals=()' >> approval_data.sh
          
          # 使用 jq 解析包含 LGTM 的有效评论
          jq -r --arg reviewers "$reviewers" '
            .[] | 
            select(.user.login != "github-actions[bot]") |  # 排除 bot 的评论
            select(.body | test("^\\s*LGTM\\s*$"; "i")) |   # 匹配 LGTM 评论（不区分大小写）
            .user.login as $user |
            "@\($user)" as $mention |
            select($mention | inside($reviewers)) |         # 过滤有效审查者
            "approvals[\"\($mention)\"]=\"\(.created_at)\""  # 记录审批时间
          ' <<< "$comments" >> approval_data.sh
          
          # 加载审查数据并生成状态报告
          chmod +x approval_data.sh
          source ./approval_data.sh
          cat approval_data.sh

          {
            echo "---"
            echo "### 📊 Current Review Status (Last Updated: $current_time)"
            while read -r reviewer; do
              if [[ -n "${approvals[$reviewer]}" ]]; then
                timestamp=$(date -d "${approvals[$reviewer]}" -u +"%Y-%m-%d %H:%M UTC")
                echo "- ✅ **$reviewer** Reviewed On $timestamp"
              else
                echo "- ⌛ **$reviewer** Pending Review"
              fi
            done < unique_reviewers.txt
          } > review_status.md

      - name: Generate review data
        id: generate_review
        run: |
          existing_comment=$(curl -s \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments" | \
          jq -r '.[] | select(.user.login == "github-actions[bot]") | {id: .id, body: .body} | @base64')
        
          echo "$existing_comment"| base64 -d
          # 获取历史已通知的审核者（从现有评论中提取）
          if [[ -n "$existing_comment" ]]; then
            notified_users=$(echo "$existing_comment" | base64 -d | jq -r '.body' | 
              grep -oP '<!-- NOTIFIED_REVIEWERS: \K[^>]+' )
          else
            notified_users=""
          fi
          echo "-------------------------------------------------"
          echo "$notified_users"
          # 生成待通知的新审核者列表
          current_reviewers=$(cat unique_reviewers.txt | xargs)
          echo "-------------------------------------------------"
          cat unique_reviewers.txt
          echo "-------------------------------------------------"
          echo "$current_reviewers"
          # 对比差异：新增审核者需要@，已有审核者去@
          new_reviewers=()
          existing_reviewers=()
          for user in $current_reviewers; do
            if [[ " $notified_users " =~ " $user " ]]; then
              existing_reviewers+=("${user#@}")  # 去掉@前缀
            else
              new_reviewers+=("$user")
            fi
          done

          echo "-------------------------------------------------"
          echo "$new_reviewers"
          echo "-------------------------------------------------"
          echo "$existing_reviewers"
          current_time=$(date -u +"%Y-%m-%d %H:%M UTC")
          {
            echo "<!-- NOTIFIED_REVIEWERS: ${new_reviewers[*]} ${existing_reviewers[*]} -->"

            # 生成审查分配信息
            echo "## 📌 Code Review Assignment"
            echo ""

            while IFS='|' read -r tag path reviewers; do
              if grep -qE "^$path(/|$)" changed_files.txt; then
                echo "### 🏷️ Tag: $tag"
                echo "**Path:** \`$path\`  "

                # 处理评审者显示逻辑
                formatted_reviewers=""
                for r in $reviewers; do
                  if [[ " ${new_reviewers[@]} " =~ " $r " ]]; then
                    formatted_reviewers+="$r "       # 新审核者带@
                  else
                    formatted_reviewers+="${r#@} "   # 已有审核者去@
                  fi
                done

                echo "**Reviewers:** $reviewers  "
                echo "<details>"
                echo "<summary><b>Changed Files</b> (Click to expand)</summary>"
                echo ""
                grep -E "^$path(/|$)" changed_files.txt | sed 's/^/- /'  # 列出匹配的变更文件
                echo ""
                echo "</details>"
                echo ""
              fi
            done < tag_data.csv
            # 插入审查状态
            cat review_status.md

            echo "---"
            echo "### 📝 Review Instructions"
            echo ""
            echo "1. **维护者可以通过单击此处来刷新审查状态:** [🔄 刷新状态](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
            echo "   **Maintainers can refresh the review status by clicking here:** [🔄 Refresh Status](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
            echo ""
            echo "2. **确认审核通过后评论 \`LGTM/lgtm\`**"
            echo "   **Comment \`LGTM/lgtm\` after confirming approval**"
            echo ""
            echo "3. **PR合并前需至少一位维护者确认**"
            echo "   **PR must be confirmed by at least one maintainer before merging**"
            echo ""
            echo "> ℹ️ **刷新CI状态操作需要具备仓库写入权限。**"
            echo "> ℹ️ **Refresh CI status operation requires repository Write permission.**"
          } > review_data.md
          echo "-------------------------------------------------"
          cat review_data.md
      # - name: Save PR number
      #   run: |
      #     mkdir -p ./pr
      #     echo ${{ github.event.number }} > ./pr/NR
      #     mv /home/runner/work/rt-thread/rt-thread/review_data.md ./pr/
      #     ls

      # - uses: actions/upload-artifact@v4
      #   with:
      #     name: pr
      #     path: pr
      
      - name: Post/Update comment
        id: post_comment
        run: |
          # 查找现有的 bot 评论
          existing_comment=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments" | \
            jq -r '.[] | select(.user.login == "github-actions[bot]") | {id: .id, body: .body} | @base64')
          
          if [[ -n "$existing_comment" ]]; then
            # 更新现有评论
            comment_id=$(echo "$existing_comment" | head -1 | base64 -d | jq -r .id)
            echo "Updating existing comment $comment_id"
            response=$(curl -s -X PATCH \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -d "$(jq -n --arg body "$(cat review_data.md)" '{body: $body}')" \
              "https://api.github.com/repos/${{ github.repository }}/issues/comments/$comment_id")
          else
            # 创建新评论
            echo "Creating new comment"
            response=$(curl -s -X POST \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -d "$(jq -n --arg body "$(cat review_data.md)" '{body: $body}')" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments")
          fi